<?php

namespace Eight\PageBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Eight\PageBundle\Model\PageInterface;

/**
 * BlockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlockRepository extends EntityRepository
{
    public function getNextPosition($parent, $id, $slot_label = 'default')
    {
        $q = $this->createQueryBuilder('b');

        $q
            ->select('b.seq')
            ->where('b.type = :type')
            ;

        if ($parent instanceof PageInterface) {
            $q
                ->andWhere('b.page = :parent')
                ;
        } else {
            $q
                ->andWhere('b.block = :parent')
                ;
        }

        $q
            ->orderBy('b.seq', 'DESC')
            ->setMaxResults(1)
            ->setParameters(array(
                'type' => $slot_label,
                'parent' => $parent,
                ))
            ;

        $current = $q->getQuery()->getScalarResult();

        if (count($current)) {
            $next = (int) $current[0]['seq'];
            return $next + 1;
        }

        return 0;
    }

    public function getNextStaticPosition($slot_label = 'default')
    {
        $q = $this->createQueryBuilder('b');

        $q
            ->select('b.seq')
            ->where('b.type = :type AND b.static = :static')
            ->orderBy('b.seq', 'DESC')
            ->setMaxResults(1)
            ->setParameters(array(
                'static' => true,
                'type' => $slot_label
                ))
            ;

        $current = $q->getQuery()->getScalarResult();

        if (count($current)) {
            $next = (int) $current[0]['seq'];
            return $next + 1;
        }

        return 0;
    }

    public function getStatic($slot_label = null, $enabled = false)
    {
        $q = $this->createQueryBuilder('b');

        $q
            ->select('b')
            ;

        if ($slot_label) {
            $q
                ->where('b.type = :type AND b.static = :static')
                ->orderBy('b.seq', 'ASC')
                ->setParameters(array(
                    'static' => true,
                    'type' => $slot_label,
                    ))
                ;
        } else {
            $q
                ->where('b.static = :static')
                ->orderBy('b.seq', 'ASC')
                ->setParameters(array(
                    'static' => true,
                    ))
                ;
        }

        if ($enabled) {
            $q
                ->andWhere('b.enabled = :enabled')
                ->setParameter('enabled', true)
                ;
        }

        return $q->getQuery()->getResult();
    }

    public function getStaticBlocks()
    {
        $q = $this->createQueryBuilder('b');

        $q
            ->select('b')
            ->where('b.static = :static')
            ->andWhere('b.enabled = :enabled')
            ->orderBy('b.seq', 'ASC')
            ->setParameters(array(
                'static' => true,
                'enabled' => true,
                ))
            ;

        return $q->getQuery()->getResult();
    }
}
